class MaxHeap:
    def init(self):
        self.heap = []
    
    def insert(self, val):
        self.heap.append(val)
        self._heapify_up(len(self.heap) - 1)
    
    def delete(self, val):
        if len(self.heap) == 0:
            raise IndexError("delete from empty heap")
        
        try:
            idx = self.heap.index(val)
        except ValueError:
            raise ValueError("value not found in heap")
        
        self.heap[idx] = self.heap[-1]
        del self.heap[-1]
        
        if idx < len(self.heap):
            self._heapify_down(idx)
    
    def get_max(self):
        if len(self.heap) == 0:
            raise IndexError("get_max from empty heap")
        
        return self.heap[0]
    
    def _heapify_up(self, idx):
        parent_idx = (idx - 1) // 2
        
        while idx > 0 and self.heap[parent_idx] < self.heap[idx]:
            self.heap[parent_idx], self.heap[idx] = self.heap[idx], self.heap[parent_idx]
            idx = parent_idx
            parent_idx = (idx - 1) // 2
    
    def _heapify_down(self, idx):
        while True:
            left_idx = 2 * idx + 1
            right_idx = 2 * idx + 2
            largest = idx
            
            if left_idx < len(self.heap) and self.heap[left_idx] > self.heap[largest]:
                largest = left_idx
            
            if right_idx < len(self.heap) and self.heap[right_idx] > self.heap[largest]:
                largest = right_idx
            
            if largest != idx:
                self.heap[idx], self.heap[largest] = self.heap[largest], self.heap[idx]
                idx = largest
            else:
                break

# Example usage:
heap = MaxHeap()

# Insert elements into the heap
heap.insert(10)
heap.insert(30)
heap.insert(20)
print("Max element after insertions:", heap.get_max())  # Output: 30

# Delete an element (30) from the heap
heap.delete(30)
print("Max element after deletion:", heap.get_max())  # Output: 20
