import time
import functools
import logging

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

# Decorator to measure execution time
def measure_time(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        start_time = time.time()
        result = func(*args, **kwargs)
        end_time = time.time()
        execution_time = end_time - start_time
        logging.info(f"Function {func.name} executed in {execution_time:.4f} seconds")
        return result
    return wrapper

# Example functions to test the decorator
@measure_time
def calculate_sum(a, b):
    time.sleep(1)  # Simulate some computation time
    return a + b

@measure_time
def factorial(n):
    time.sleep(2)  # Simulate some computation time
    return 1 if n == 0 else n * factorial(n-1)

# Test the decorated functions
result1 = calculate_sum(5, 10)
result2 = factorial(5)

# Output results
print("Sum:", result1)
print("Factorial:", result2)
